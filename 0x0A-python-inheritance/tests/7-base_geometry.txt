"""
This is my class
"""
First import
``BaseGeometry``
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

# integer
>>> bg.integer_validator("my_int", 12)

#string
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
...
TypeError: name must be an integer

# Equal Zero
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

# Negative
>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
...
ValueError: distance must be greater than 0

# float
>>> bg.integer_validator("distance", 8.52)
Traceback (most recent call last):
...
TypeError: distance must be an integer

# Empty
>>> bg.integer_validator("distance", )
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'
>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

# Boleano
>>> bg.integer_validator("name", True)
Traceback (most recent call last):
...
TypeError: name must be an integer

# Tuple
>>> bg.integer_validator("name", (1, 5))
Traceback (most recent call last):
...
TypeError: name must be an integer

# Tuple
>>> bg.integer_validator("name", (3, ))
Traceback (most recent call last):
...
TypeError: name must be an integer

# NameError
>>> bg.integer_validator([name], 8)
Traceback (most recent call last):
...
NameError: name 'name' is not defined

# Name
>>> bg.integer_validator({"hello": 6}, -3)
Traceback (most recent call last):
...
ValueError: {'hello': 6} must be greater than 0

# list
>>> bg.integer_validator("name", [5])
Traceback (most recent call last):
...
TypeError: name must be an integer

# Dict
>>> bg.integer_validator("name", {5})
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("name", {4, 4})
Traceback (most recent call last):
...
TypeError: name must be an integer

